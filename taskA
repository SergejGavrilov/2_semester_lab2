#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>

using namespace std;

struct Node {
    int x;
    int y;
};


double distance(Node *a, Node *b) {
    /* int x1 = a->x;
     int x2 = b->x;
     int y1 = a->y;
     int y2 = b->y;
     int kv1 = pow((a->x - b->x), 2);
     */
    return sqrt(pow(fabs(a->x - b->x), 2) + pow(fabs(a->y - b->y), 2));
}



int main() {
    const int INF = 29000;
    vector<Node*> nodes;
    vector<double> min;
    vector<bool> used;
    ifstream in;
    ofstream out;
    //in.open("C:\\Users\\808648\\Desktop\\Algorithmlab2\\spantree.in", ios::in);
    in.open("spantree.in", ios::in);
    out.open("spantree.out", ios::out);
    int n;
    in >> n;

    for (int i = 0; i < n; i++) {
        int x, y;
        in >> x >> y;
        struct Node *node;
        node = new Node;
        node->x = x;
        node->y = y;
        nodes.push_back(node);
        min.push_back(INF);
        used.push_back(false);
    }
    double ans = 0;

    min[0] = 0;
    for (int i = 0; i < n; i++) {
        int v = -1;
        for (int j = 0; j < n; j++) {
            if (!used[j] && (v == -1 || min[j] < min[v])) {
                v = j;
            }
        }
        used[v] = true;
        ans += min[v];

        for (int to = 0; to < n; to++) {
            double temp = distance(nodes[v], nodes[to]);
            if (temp < min[to]) {
                min[to] = temp;
            }
        }
    }

    //   distance(myVector[0], myVector[1]);
    //   cout << distance(myVector[0], myVector[1]) << endl;
    out << ans << endl;
    return 0;
}
